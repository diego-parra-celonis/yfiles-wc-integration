import { mockedCelonisProcessDiagram } from './bpmn.diagram.mock.js';

// Ensure the DOM is fully loaded before trying to access the web component
document.addEventListener('DOMContentLoaded', () => {
    const processDiagram = document.querySelector('#celonis-process-diagram');
    const processDiagramLoadFile = document.querySelector('#celonis-process-diagram-load-file');
    const processDiagramEventLog = document.querySelector('#celonis-process-diagram-event-log');

    function appendLog(message) {
        processDiagramEventLog.value += message + '\n';
        scrollLogToBottom();
    }

    function scrollLogToBottom(){
        try {
            processDiagramEventLog.scrollTop = processDiagramEventLog.scrollHeight;
        } catch {
            // Intentially left empty
        }
    }

    processDiagramLoadFile.addEventListener('click', () => {
        // Invokes a method within the web component 
        processDiagram.loadDiagramData(mockedCelonisProcessDiagram);
    });
    
    if (processDiagram) {
        // Reads the events generated by the web component
        processDiagram.addEventListener('onElementSelected', (event) => appendLog(`Element selected: ${event.detail.itemJson.label}`));
        processDiagram.addEventListener('onElementAdded', (event) => appendLog(`Element added: ${event.detail.itemJson.class}`));
        processDiagram.addEventListener('onElementRemoved', (event) => appendLog(`Element removed: ${event.detail.itemJson.class}`));
        processDiagram.addEventListener('onElementLabelEdited', (event) => appendLog(`Element label edited: ${event.detail.itemJson.label}`));
        processDiagram.addEventListener('onCanvasClicked', (event) => appendLog(`Canvas clicked at: ${event.detail.location.x}, ${event.detail.location.y}`));
        processDiagram.addEventListener('onLaneMoved', (event) => appendLog(`Lane moved: ${event.detail.itemJson.label}`));
        processDiagram.addEventListener('onPoolMoved', (event) => appendLog(`Pool moved: ${event.detail.itemJson.label}`));
    }
});